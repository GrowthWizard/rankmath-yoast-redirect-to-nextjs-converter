/*
* Will be used for reading a CSV File and convert it to JSON
* Check Documentation: https://www.npmjs.com/package/papaparse
*/

import Papa from "papaparse";
import { useEffect, useState } from "react";
import Link from 'next/link';
import dynamic from 'next/dynamic';

// import Components 
import UploadButton from "../components/upload-button";

export default function Home() {

  // State to store parsed data
  const [parsedCsvData, setParsedCsvData] = useState([]);

  //State to store table Column name
  const [csvRows, setCsvRows] = useState([]);
  
  //State to store the values
  const [csvValues, setCsvValues] = useState([]);

  // State to store the actual data for the redirects [301, 302 307, 308]
  const [redirects, setRedirects] = useState([]);

  // State to store the actual data for Statuscode [410]
  const [statusDeleted, setStatusDeleted] = useState([]);

  const [finalJson, setFinalJson] = useState(null);

  useEffect(() => {
    setFinalJson(generateJsonOutput(redirects));
  }, [redirects, finalJson])

  function generateJsonOutput(redirects) {
    const jsonOutput = [];
    jsonOutput.push(redirects.map((d) => {
      return {source: `/${d[1]}`, destination: `${d[3]}`, permanent: true,}
      }));
      let str = JSON.stringify(jsonOutput[0], null, "\t");
      let strWithOutQuotes = str.replace(/"([^"]+)":/g, '$1:');
      let json = `async redirects() { 
        return ${strWithOutQuotes};
      },`;
      return json;
  }

  const CopyButton = dynamic(() => import("../components/copy-to-clipboard").then(mod => mod.CopyToClipboard), { ssr: false })

  const changeHandler = (event) => {
    // Passing file data (event.target.files[0]) to parse using Papa.parse
    Papa.parse(event.target.files[0], {
      header: true,
      skipEmptyLines: true,
      complete: function (results) {
        const rowsArray = [];
        const valuesArray = [];

        // Iterating data to get column name and their values
        results.data.map((d) => {
          //console.log(results.data);
          rowsArray.push(Object.keys(d));
          //console.log(Object.keys(d));
          //console.log(`rowsArray: ${rowsArray}`);
          valuesArray.push(Object.values(d));
          //console.log(Object.values(d));
          //console.log(`valuesArray: ${valuesArray}`);
        });

        const redirects = [];
        const statusDeleted = [];

        valuesArray.map((d) => {
          if (d[4] === "301") {
            redirects.push(d);
          };

          if (d[4] === "410") {
            statusDeleted.push(d);
          }
        })

        //console.log(`Redirects: ${redirects}`);
        //console.log(`Status Deleted: ${statusDeleted}`);

        redirects.map((d)=> {
          //console.log(`Redirects: ${d}`);
        })

        statusDeleted.map((d)=> {
          //console.log(`Deleted: ${d}`);
        })


          // Parsed Data Response in array format
          setParsedCsvData(results.data);

          // Filtered Column Names
          setCsvRows(rowsArray[0]);
        
          // Filtered Values
          setCsvValues(valuesArray);

          // Set filtered Redirects
          setRedirects(redirects);

          // Set filtered Status Deleted
          setStatusDeleted(statusDeleted);

          },
        });
    };
    

  return (
    <div>

    <div className="min-h-[300px] bg-gray-500 text-white mb-7">
      <div className="flex flex-wrap px-5">
        <div className="md:max-w-1/2 md:p-[5%]">
          <h1 className="font-bold md:text-2xl">Convert RankMath Redirects to next.js</h1>
          <p className="text-sm mb-4">This is a simple Tool build in next.js, which will help you to convert your Redirects your redirects generated by the RankMath Plugin for WordPress to your next.js Application file. Check the Documentation for full instructions in how to use this application.</p>
          <ol className="text-sm pl-7 list-decimal">
            <li>Export RankMath Redirections</li>
            <li>Upload .csv file</li>
            <li>Import the converted code into your next.config.js</li>
          </ol>
        </div>
        <div className="flex flex-wrap justify-center md:max-w-1/2 md:p-[5%]">
          <UploadButton ChangeHandler={changeHandler}/>
         </div>
      </div>
    </div>
      <div>
      {/* Gonna hide the raw parsed CSV Data later */}
      <div className="px-5 max-w-7xl mx-auto mb-7">
      <h2 className="text-2xl font-bold mb-4">Your Upload:</h2>
        <div className="p-4 max-h-60 overflow-y-auto border border-gray-400 rounded-xl">
          <table>
          <thead>
            <tr>
              {csvRows.map((rows, index) => {
                return <th key={index}>{rows}</th>;
              })}
            </tr>
          </thead>
          <tbody>
            {csvValues.map((value, index) => {
              return (
                <tr key={index}>
                  {value.map((val, i) => {
                    return <td key={i}>{val}</td>;
                  })}
                </tr>
              );
            })}
          </tbody>
          </table>
        </div>
      </div>

      <div className="px-5 max-w-7xl mx-auto mb-7">
      <h2 className="text-2xl font-bold mb-4">Only Redirects</h2>
      <div className="p-4 max-h-60 overflow-y-auto border border-gray-400 rounded-xl">
        {/* Only shows the redirects */}
        <table>
        <thead>
          <tr>
            {csvRows.map((rows, index) => {
              return <th key={index}>{rows}</th>;
            })}
          </tr>
        </thead>
        <tbody>
          {redirects.map((value, index) => {
            return (
              <tr key={index}>
                {value.map((val, i) => {
                  return <td key={i}>{val}</td>;
                })}
              </tr>
            );
          })}
        </tbody>
        </table>  
        </div>
        </div>

      <div className="max-w-7xl mx-auto px-5 mb-7 md:mb-14">
        <h2 className="text-2xl font-bold mb-4">Your next.js config Output</h2>
        <form className="flex flex-col p-4 border border-gray-400 rounded-xl">
        <CopyButton content={finalJson} />
          <textarea className="w-full" col="1" rows="30" readOnly value={generateJsonOutput(redirects)}/>
        </form>
      </div>
      </div>
    </div>
  )
}
